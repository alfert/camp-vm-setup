# -*- mode: ruby -*-
# vi: set ft=ruby :

CHEF_REPO="../../chef-repo"

Vagrant::Config.run do |config|

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise-server-i386"
  config.vm.host_name = "apt-cacher"

  # Damit das Booten klappt.
  config.vm.customize ["modifyvm", :id, "--rtcuseutc", "on"]

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Port for apt cacher 
  config.vm.forward_port 3142, 3142

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  
  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #
  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = ["#{CHEF_REPO}/cookbooks","#{CHEF_REPO}/my-cookbooks"]
    chef.roles_path = "#{CHEF_REPO}/roles"
    chef.data_bags_path = "#{CHEF_REPO}/data_bags"

    chef.add_recipe "apt::cacher-ng"
    chef.add_role "base"
  
    # You may also specify custom JSON attributes:
    #   chef.json = { :mysql_password => "foo" }
  end

end
